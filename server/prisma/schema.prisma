// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String          @id @default(uuid())
  username      String
  fullName      String
  photo         String?
  role          String
  email         String
  isActive      Boolean         @default(true)
  createdAt     DateTime        @default(now())
  student       Student[]
  studentUpdate StudentUpdate[]
  schoolYear    SchoolYear[]
  semester      Semester[]
  department    Department[]
  program       Program[]
  printedBy     Printing[]      @relation("PrintedBy")
  releasedBy    Printing[]      @relation("ReleasedBy")
  validation    Validation[]
}

model SchoolYear {
  id             String       @id @default(uuid())
  schoolYearFrom DateTime
  schoolYearTo   DateTime
  isActive       Boolean      @default(false)
  userId         String
  user           User         @relation(fields: [userId], references: [id])
  createdAt      DateTime     @default(now())
  semester       Semester[]
  printing       Printing[]
  validation     Validation[]
}

model Semester {
  id                 String       @id @default(uuid())
  semester           String
  semestralDateStart DateTime
  semestralDateEnd   DateTime
  isActive           Boolean      @default(false)
  schoolYearId       String
  schoolYear         SchoolYear   @relation(fields: [schoolYearId], references: [id])
  userId             String
  user               User         @relation(fields: [userId], references: [id])
  createdAt          DateTime     @default(now())
  printing           Printing[]
  validation         Validation[]
}

model Department {
  id             String    @id @default(uuid())
  departmentName String
  userId         String
  user           User      @relation(fields: [userId], references: [id])
  createdAt      DateTime  @default(now())
  program        Program[]
}

model Program {
  id           String     @id @default(uuid())
  programName  String
  departmentId String
  department   Department @relation(fields: [departmentId], references: [id])
  userId       String
  user         User       @relation(fields: [userId], references: [id])
  createdAt    DateTime   @default(now())
}

model Student {
  id              String          @id @default(uuid())
  idNumber        String          @unique
  lastName        String
  firstName       String
  middleInitial   String
  address         String
  guardian        String
  guardianContact String
  userId          String
  user            User            @relation(fields: [userId], references: [id])
  createdAt       DateTime        @default(now())
  studentUpdate   StudentUpdate[]
  printing        Printing[]
  validation      Validation[]
}

model StudentUpdate {
  id          Int      @id @default(autoincrement())
  updatedDate DateTime @default(now())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  studentId   String
  student     Student  @relation(fields: [studentId], references: [id])
}

model Printing {
  id               Int        @id @default(autoincrement())
  reprintReason    String
  printType        String
  studentId        String
  student          Student    @relation(fields: [studentId], references: [id])
  printedByUserId  String
  printedBy        User       @relation("PrintedBy", fields: [printedByUserId], references: [id])
  printedDate      DateTime   @default(now())
  releasedByUserId String
  releasedBy       User       @relation("ReleasedBy", fields: [releasedByUserId], references: [id])
  releasedDate     DateTime   @default(now())
  schoolYearId     String
  schoolYear       SchoolYear @relation(fields: [schoolYearId], references: [id])
  semesterId       String
  semester         Semester   @relation(fields: [semesterId], references: [id])
}

model Validation {
  id            Int        @id @default(autoincrement())
  studentId     String
  student       Student    @relation(fields: [studentId], references: [id])
  dateValidated DateTime   @default(now())
  schoolYearId  String
  schoolYear    SchoolYear @relation(fields: [schoolYearId], references: [id])
  semesterId    String
  semester      Semester   @relation(fields: [semesterId], references: [id])
  userId        String
  user          User       @relation(fields: [userId], references: [id])
}
